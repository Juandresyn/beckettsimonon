window.template = (function() {
  var classes = {
    domReady: 'dom-ready',
  };

  function domReady() {
    $('html').addClass(classes.domReady);
  }

  function init() {
    domReady();
  }

  return {
    init: init,
  };
})();

var imageService = function(img, w, h = w) {
  var imgSplit = img.split('.');
  var imgFormat = imgSplit[imgSplit.length - 1];
  var imgFirst = img.split('.'+imgFormat)[0];

  return imgFirst + '_' + w + 'x' + h + '.' + imgFormat;
};

var addToCart = function(id, cb) {
  $.ajax({
    url: '/cart/add.js',
    method: 'POST',
    dataType: 'json',
    data: {
      quantity: 1,
      id,
    },
    success: function(data) {
      cb(data);
    }
  });
};

var getUrlParameter = function(name) {
  name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
  var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
  var results = regex.exec(location.search);
  return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
};

var handleSvg = function() {
  $('img.svg').each(function(){
    var $img = $(this);
    var imgID = $img.attr('id');
    var imgClass = $img.attr('class');
    var imgURL = $img.attr('src');

    $.get(imgURL, function(data) {
      // Get the SVG tag, ignore the rest
      var $svg = $(data).find('svg');

      // Add replaced image's ID to the new SVG
      if(typeof imgID !== 'undefined') {
        $svg = $svg.attr('id', imgID);
      }
      // Add replaced image's classes to the new SVG
      if(typeof imgClass !== 'undefined') {
        $svg = $svg.attr('class', imgClass+' replaced-svg');
      }

      // Remove any invalid XML tags as per http://validator.w3.org
      $svg = $svg.removeAttr('xmlns:a');

      // Check if the viewport is set, else we gonna set it if we can.
      if(!$svg.attr('viewBox') && $svg.attr('height') && $svg.attr('width')) {
        $svg.attr('viewBox', '0 0 ' + $svg.attr('height') + ' ' + $svg.attr('width'));
      }

      // Replace image with new SVG
      $img.replaceWith($svg);
    }, 'xml');
  });
};

$(window).on('load', function() {
  handleSvg();
  $('html').css("overflow", "");
});

$(window).on('load', function() {
  if ($('body').hasClass('page--article')) {
    var articleSlider = $('.js-article-gallery');
    var articleSliderArrowPrev = $('.js-article-carousel__prev');
    var articleSliderArrowNext = $('.js-article-carousel__next');

    articleSlider.slick({
      centerMode: true,
      centerPadding: '350px',
      infinite: true,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: false,
      responsive: [
        {
          breakpoint: 1024,
          settings: {
            centerPadding: '200px',
          }
        },
        {
          breakpoint: 768,
          settings: {
            centerPadding: '80px',
          }
        },
        {
          breakpoint: 480,
          settings: {
            centerPadding: '40px',
          }
        },
      ],
    });

    articleSliderArrowPrev.on('click', function() {
      articleSlider.slick('slickPrev');
    });

    articleSliderArrowNext.on('click', function() {
      articleSlider.slick('slickNext');
    });
  }
});

// Cart Template '/cart' scripts
function updateItem(el, type) {
  var $input = $(el).siblings('.js-quantity')[0];
  var currentValue = parseInt($input.value);
  var newValue = type === 'add' ? currentValue + 1 : currentValue - 1;
  $input.value = newValue;
}

$('.js-cart .js-quantity-add').on('click', function(e) {
  updateItem(this, 'add');
});

$('.js-cart .js-quantity-less').on('click', function(e) {
  updateItem(this, 'less');
});

if (typeof Vue === 'function') {
  Vue.component('inline-cart-item', {
    name: 'InlineCartItem',

    data: function () {
      return {
        cart: window.cart,
        cart_count: window.window.cart_count,
      };
    },

    methods: {
      cleanTitle(title) {
        return title.split(' -')[0];
      },

      cleanPrice(price) {
        return price.toString().endsWith('00') ? price / 100 : price;
      },

      handleRemoveLink(index) {
        return `/cart/change?line=${index }&amp;quantity=0`;
      },

      updateGlobalCartCount(newQty) {
        document.querySelectorAll('.js-cart-count')
          .forEach((item) => item.innerHTML = newQty);
      },

      updateInlineCartTotalPrice() {
        let totalPrice = 0;
        for (let i = 0; i < this.cart.length; i++) {
          totalPrice += this.cart[i].line_price;
        }

        document.querySelector('.js-inline-cart-total').innerHTML = `$${this.cleanPrice(totalPrice)}`;
      },

      handleQuantity(type, qty, index, price) {
        const totalQty = type === 'add' ? qty + 1 : qty - 1;
        const finalQty = totalQty <= 1 ? 1 : totalQty;
        const globalQty = (this.cart_count - qty) + finalQty;

        this.ajaxUpdateItem(this.cart[index].key, finalQty, () => {
          this.cart_count = globalQty;
          this.cart[index].quantity = finalQty;
          this.cart[index].line_price = price * finalQty;

          this.updateGlobalCartCount(globalQty);
          this.updateInlineCartTotalPrice();
        });
      },

      handleRemoveItem(index) {
        const currentQty = this.cart[index].quantity;
        const newCartCount = this.cart_count - currentQty;

        if (newCartCount === 0) {
          $('.js-empty-template').toggle();
        }

        return this.ajaxUpdateItem(this.cart[index].key, 0, () => {
          this.cart[index].quantity = 0;
          this.cart[index].line_price = 0;

          this.updateGlobalCartCount(newCartCount);
          this.updateInlineCartTotalPrice();
        });
      },

      ajaxUpdateItem(id, quantity, cb) {
        $.ajax({
          method: "POST",
          url: "/cart/change.js",
          dataType: 'json',
          data: {
            id,
            quantity,
          }
        })
        .done(function() {
          cb();
        });
      },
    },

    template: `
      <div class="cart__list">
        <div  v-for="(item, index) in cart"
          :key="index"
          v-if="item.quantity > 0"
          class="cart__item">
          <a :href="item.url">
            <img class="cart-item__image"
              :src="item.image"
              :alt="item.title">
          </a>

          <div class="cart-item__info">
            <h2 class="cart-item__title">{{ cleanTitle(item.title) }}</h2>

            <small class="cart-item__small">{{ item.product_type }}</small>
            <small class="cart-item__small">Size. {{ item.variant_title }}</small>

            <div class="cart-item__quantity">
              <span @click="handleQuantity('less', item.quantity, index, item.price)"
                type="submit"
                class="cart-item__quantity-button">-</span>

              <input
                class="cart-item__quantity-input"
                type="text"
                readonly
                :value="item.quantity" />

              <span @click="handleQuantity('add', item.quantity, index, item.price)"
                type="submit"
                class="cart-item__quantity-button">+</span>
            </div>
          </div>

          <p class="cart-item__price">$ {{ cleanPrice(item.line_price) }}</p>
          <span @click="handleRemoveItem(index)" class="cart-item__remove">Remove</span>
        </div>
      </div>
    `,
  });

  new Vue({
    el: '#inline-cart',
  });
}

if ($('body').hasClass('page--collection')) {
  var navEl = $('.js-all-products__filters');
  var headerEl = $('#shopify-section-header');
  var allProducts = $('.js-all-products');
  var informationNavMaxTop = headerEl.innerHeight();

  $(window).scroll(function() {
    var scrollTop = $(window).scrollTop();

    if (scrollTop >= informationNavMaxTop) {
      navEl.addClass('all-products__filters--fixed');
      allProducts.css({ 'padding-top': navEl.innerHeight() });
    } else {
      navEl.removeClass('all-products__filters--fixed');
      allProducts.css({ 'padding-top': 0 });
    }
  });
}

$('.js-on-click').on('click', function() {
  var target = $(this).data('onclick-target');
  var targetClass = $(this).data('onclick-class');
  var targetClassBehavior = $(this).data('do');

  if(targetClassBehavior && targetClassBehavior === 'add') {
    $(target).addClass(targetClass);
  } else if (targetClassBehavior && targetClassBehavior === 'remove') {
    $(target).removeClass(targetClass);
  } else {
    $(target).toggleClass(targetClass);
  }
});

$('.js-active-on-click').on('click', function() {
  $(this).toggleClass('is-active');
});

$(window).scroll(function(){
  $('.js-on-show').each(function() {
    var target = $(this).data('onshow-target');
    var targetClass = $(this).data('onshow-class');
    if (isScrolledIntoView($(this))) {
      $(this).find(target).addClass(targetClass || 'animate');
    }
  });
});

function isScrolledIntoView(elem){
  var $elem = $(elem);
  var $window = $(window);

  var docViewTop = $window.scrollTop();
  var docViewBottom = docViewTop + $window.height();

  var elemTop = $elem.offset().top;
  var elemBottom = elemTop + $elem.height();

  return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
}

if ($('body').hasClass('page--information')) {
  var navEl = $('.js-information-nav');
  var informationNavMaxTop = window.innerHeight - navEl.innerHeight();

  $(window).scroll(function() {
    var scrollTop = $(window).scrollTop();

    if (scrollTop >= informationNavMaxTop) {
      navEl.addClass('information-nav--fixed');
    } else {
      navEl.removeClass('information-nav--fixed');
    }
  });
}

function resultTemplate(result) {
  return '<li class="search-modal__result"><a href="' + result.url + '" class="search-modal__result-link"><img src="' + result.thumb + '" class="search-modal__result-image" /><div class="search-modal__result-info"><h3 class="search-modal__result-title">' + result.label + '</h3><p class="search-modal__result-price">' + result.price + '</p></div></a></li>';
}

function appendResults(results, $target) {
  for (i = 0; i < results.length; i++) {
    $target.append(resultTemplate(results[i]));
  }
}

$('.js-live-search').on('keyup', function(e) {
  var appendTo = $(this).siblings('.js-live-search-results');
  var searchTerm = e.target.value.toLowerCase();

  if (searchTerm.length >= 3) {
    $.ajax({
      url: "/search",
      data: {
        q: "*" + e.target.value.toLowerCase() + "*",
        type: "product",
        view: "json",
      },
      dataType: "json",
      success: function(data) {
        appendTo.html('');
        appendResults(data, appendTo);
      }
    });
  } else {
    appendTo.html('');
  }
});

if (typeof Vue === 'function') {
  Vue.component('login-register', {
    name: 'loginRegister',

    props: {
      customer: {
        default: '',
        type: String,
      },
      mobile: {
        default: false,
        type: Boolean,
      },
    },

    data: function () {
      return {
        isOpen: false,
        isLogin: true,
        isRegister: false,
        isRecover: false,
        isMobile: window.innerWidth < 1120,
        hovering: false,
        modalDefaultClasses: 'modal login-form-modal login-form',
        currentPath: window.location.pathname,
      };
    },

    computed: {
      modalClasses() {
        return {
          [this.modalDefaultClasses]: true,
        };
      },

      triggerClass() {
        return {
          'login-form-modal__hover': this.hovering,
        };
      },

      hasCustomer() {
        return this.customer !== '';
      },

      modalTitle() {
        return this.isLogin ? !this.isRecover ? 'Login' : 'Recover' : 'Register';
      },

      footerText() {
        return this.isLogin ? 'NEW CUSTOMER? <span>SIGN UP HERE</span>' : 'RETURNING CUSTOMER? <span>LOG IN HERE</span>';
      },

      linkLabel() {
        return this.hasCustomer ? 'My Account' : 'Login';
      },

      handleShow() {
        if (this.isMobile && this.$parent.$el.id === 'header-main-mobile') {
          return true;
        } else if (this.isMobile && this.$parent.$el.id === 'header-main') {
          return false;
        } else if (!this.isMobile && this.$parent.$el.id === 'header-main') {
          return true;
        }
      },
    },

    mounted() {
      window.addEventListener('resize', this.handleResize);
    },

    methods: {
      reset() {
        this.isOpen = false;
        this.isLogin = true;
        this.isRegister = false;
        this.isRecover = false;
        this.isMobile = window.innerWidth < 1120;
        this.hovering = false;
        this.modalDefaultClasses = 'modal login-form-modal login-form';
        this.currentPath = window.location.pathname;
      },

      toggleModal() {
        this.reset();

        if (this.isMobile && document.body.classList.contains('menu-is-open')) {
          document.querySelector('.header-main__modal').classList.toggle('menu-login-form');
        }

        this.isOpen = !this.isOpen;

        document.documentElement.classList.toggle('login-form-modal--open');
      },

      toggleForm() {
        this.isLogin = !this.isLogin;
        this.isRegister = !this.isRegister;
      },

      handleMouseIn() {
        this.hovering = !!this.customer;
      },

      handleMouseOut() {
        this.hovering = false;
      },

      handleResize() {
        this.isMobile = window.innerWidth < 1120;
      }
    },

    template: `
      <span v-if="handleShow" :class="['login-form-modal__trigger', triggerClass]">
        <span v-if="!hasCustomer" @click="toggleModal" class="login-form-modal__label">{{ linkLabel }}</span>
        <a v-if="hasCustomer" href="/account" class="login-form-modal__label">{{ linkLabel }}</a>

        <div :class="modalClasses">
          <div class="modal__container">
            <div class="modal__header">
              <h2 class="modal__title">{{ modalTitle }}</h2>

              <span class="modal__close">
                <span @click="toggleModal" class="icon icon--close"></span>
              </span>
            </div>

            <div class="modal__content">
              <transition name="fade">
                <form method="post"
                  v-if="isRecover"
                  action="/account/recover"
                  accept-charset="UTF-8">
                  <input type="hidden" name="form_type" value="recover_customer_password">
                  <input type="hidden" name="utf8" value="✓">

                  <div class="input-control">
                    <label for="email" class="form-label required">Email</label>
                    <input type="email" name="email" id="RecoverEmail" autocorrect="off" autocapitalize="off" class="input form-input">
                  </div>

                  <div class="input-control input-control--action">
                      <button class="btn btn--scarlet login-form-modal__btn"> Send Email </button>
                      <span class="btn btn--dark login-form-modal__btn" @click="isRecover = !isRecover">Login Instead</span>
                    </div>
                </form>
              </transition>

              <transition name="fade">
                <form
                  v-if="isLogin && !isRecover"
                  method="post"
                  action="/account/login"
                  id="customer_login"
                  class="login-form"
                  accept-charset="UTF-8">
                  <input type="hidden" name="checkout_url" :value="currentPath" />

                  <div class="input-control">
                    <label for="email" class="form-label required">Email</label>
                    <input type="text" name="customer[email]" id="email" class="input form-input">
                  </div>

                  <div class="input-control">
                    <label for="password" class="form-label required">Password</label>
                    <input type="password" name="customer[password]" id="password" class="input form-input" autocomplete="new-password">
                  </div>

                  <div class="input-control input-control--action">
                    <button class="btn btn--scarlet login-form-modal__btn">Login Now</button>
                    <span class="login-form-modal__forgot" @click="isRecover = !isRecover">Forgot your password?</span>
                  </div>
                </form>
              </transition>

              <transition name="fade">
                <form v-if="isRegister"
                  method="post"
                  action="/account"
                  id="create_customer"
                  accept-charset="UTF-8">
                  <input type="hidden" name="form_type" value="create_customer">
                  <input type="hidden" name="utf8" value="✓">

                  <div class="input-control">
                    <label for="first_name" class="form-label required">First Name</label>
                    <input id="first_name" type="text" class="input form-input" value="" name="customer[first_name]">
                  </div>

                  <div class="input-control">
                    <label for="last_name" class="form-label required">Last Name</label>
                    <input id="last_name" type="text" class="input form-input" value="" name="customer[last_name]">
                  </div>

                  <div class="input-control">
                    <label for="email" class="form-label required">Email Address</label>
                    <input id="email" type="email" class="input form-input" value="" name="customer[email]">
                  </div>

                  <div class="input-control">
                    <label for="password" class="form-label required">Password</label>
                    <input type="password" class="input form-input" value="" name="customer[password]">
                  </div>

                  <div class="input-control input-control--action">
                    <button class="btn btn--scarlet login-form-modal__btn">Create Account</button>
                  </div>
                </form>
              </transition>

              <div v-if="!isRecover" class="login-form-modal__footer">
                <span @click="toggleForm()" class="login-form-modal__toggle" v-html="footerText"></span>
              </div>
            </div>
          </div>
        </div>
      </span>
    `,

  });

  new Vue({
    el: '#header-main',
  });

  new Vue({
    el: '#header-main-mobile',
  });
}

$('.js-mega-menu-on-click').on('click', function() {
  var activeClass = 'is-active';
  var target = $(this).data('target');
  $('.' + activeClass).removeClass(activeClass);

  $(this).addClass(activeClass);
  $('[data-item]').hide();
  $('[data-item="'+target+'"]').show();
});

$('.js-mega-menu-close').on('click', function() {
  var activeClass = 'is-active';
  var overlay = $('.js-mega-menu__product');

  overlay.fadeOut();
  $('.' + activeClass).removeClass(activeClass);
});

$(window).on('load', function() {
  $('.js-mega-menu-item').hide();
});

var fillVariants = function(varinats) {
  return varinats.map(function(option){
    return `<option value="${option.id}">${option.title}</option>`;
  }).join('');
};

var fillTemplate = function(product, cb) {
  var img = $('.js-mega-menu__img');
  var title = $('.js-mega-menu__title');
  var price = $('.js-mega-menu__price');
  var url = $('.js-mega-menu__url');
  var type = $('.js-mega-menu__type');
  var size = $('.js-mega-menu__size');
  var variantsWrapper = $('.js-mega-menu-variants');
  var cart = $('.js-mega-menu__cart');

  img.fadeOut(function() {
    title.html(product.title.split(' -')[0]);
    price.html('$'+product.price / 100);
    url.attr('href', product.url);
    size.attr('href', product.url + '?whats-my-size=true');
    type.html(product.type);
    variantsWrapper.html(fillVariants(product.variants));
    img.attr('src', imageService(product.featured_image, 365));
    img.fadeIn();
    cb();
  });
};

$('.js-mega-menu-product').on('click', function(e) {
  e.preventDefault();
  e.stopPropagation();

  var loader = $('.js-mega-menu-loader');
  var overlay = $('.js-mega-menu__product');
  var wrapper = $('.js-mega-menu__wrapper');
  var productHandle = $(this).data('handle');

  overlay.fadeIn();
  loader.fadeIn();
  wrapper.fadeOut();

  $.ajax({
    url: '/products/'+productHandle+'.js',
    method: 'GET',
    dataType: 'json',
    success: function(data) {
      fillTemplate(data, function() {
        loader.fadeOut();
        wrapper.fadeIn();
      });
    }
  });
});

$('.js-mega-menu__cart').on('click', function() {
  var variantId = $('.js-mega-menu-variants').val();

  addToCart(variantId, function(data) {
    window.location.href = '/cart';
  });
});

if (typeof Vue === 'function') {
  const _activeItems = {
    size1: '',
    size2: '',
    size3: '',
    size4: '',
    size5: '',
    size6: '',
    size7: '',
    size8: '',
    size9: '',
    size10: '',
  };

  const _valuePicked = {
    size: null,
    shape: null,
  };

  Vue.component('my-size', {
    name: 'mySize',

    props: {
      imageUrl: {
        default: '',
        type: String,
      },
      label: {
        default: 'My Size',
        type: String,
      },
      labelClass: {
        default: '',
        type: String,
      }
    },

    data: function () {
      return {
        isOpen: false,
        modalDefaultClasses: 'modal my-size-modal my-size',
        step: 0,
        stepCount: 5,
        sizeOptions: [],
        mySize: 0,
        queryParameter: 'whats-my-size',
        takeHalf: false,
        addHalf: false,
        valuePicked: JSON.parse(JSON.stringify(_valuePicked)),
        shapeTypes: [
          {
            icon: 'shape1',
            value: 1,
            text: 'very narrow',
          },
          {
            icon: 'shape2',
            value: 2,
            text: 'somewhat narrow',
          },
          {
            icon: 'shape3',
            value: 3,
            text: 'standard width',
            popular: true,
          },
          {
            icon: 'shape4',
            value: 4,
            text: 'somewhat wide',
          },
          {
            icon: 'shape5',
            value: 5,
            text: 'very wide',
          }
        ],
        activeItems: JSON.parse(JSON.stringify(_activeItems)),
        hasError: false,
        errorCode: null,
        isMobile: window.innerWidth < 1024,
      };
    },

    computed: {
      modalClasses() {
        return {
          [this.modalDefaultClasses]: true,
          [`my-size__step my-size__step--${this.step}`]: true,
          ['my-size--started']: this.started && !this.finished,
          ['my-size--done']: this.finished,
          ['my-size--has-errors']: this.hasError,
        };
      },

      stepWidth() {
        const stepNumbers = this.stepCount + 1;
        const singleStepWidth = 100 / stepNumbers;
        let barWidth;

        if (this.hasError) {
          barWidth = 100;
        } else {
          barWidth = singleStepWidth * (this.step > stepNumbers ? stepNumbers : this.step);
        }

        return {
          'width': `${barWidth}%`,
        };
      },

      started() {
        return this.step > 0;
      },

      finished() {
        if (this.step === 6) {
          if (this.valuePicked.shape === 2) {
            this.valuePicked.size = this.takeHalf ? this.findPrevSize(this.findPrevSize(this.valuePicked.size)) : this.findPrevSize(this.valuePicked.size);
          } else if (this.valuePicked.shape === 4) {
            this.valuePicked.size = this.takeHalf ? this.findPrevSize(this.findNextSize(this.valuePicked.size)) : this.findNextSize(this.valuePicked.size);
          } else {
            this.valuePicked.size = this.takeHalf ? this.findPrevSize(this.valuePicked.size) : this.valuePicked.size;
          }

          return true;
        }

        return false;
      },

      currentIsSleceted() {
        console.log(this.activeItems, !!this.activeItems[Object.keys(this.activeItems)[this.step]]);
        return !!this.activeItems[Object.keys(this.activeItems)[this.step - 1]];
      },

      handleFooter() {
        if (this.currentIsSleceted ||
            !!this.valuePicked.shape ||
            this.hasError) {
          return true;
        } else {
          return false;
        }
      },

      sizeOptionsArray() {
        return this.sizeOptions.map(i => i.name);
      },
    },

    mounted() {
      this.setSizeOptions();
      this.setMinimunSize();

      if(getUrlParameter(this.queryParameter)) {
        this.toggleModal();
        window.history.replaceState(null, null, window.location.pathname);
      }
    },

    updated() {
      if (this.step === 5) {
        handleSvg();
      }
    },

    methods: {
      toggleModal() {
        this.reset();
        this.isOpen = !this.isOpen;

        document.documentElement.classList.toggle('my-size-modal--open');
      },

      nextStep() {
        if (this.step === 4 && !this.valuePicked.size) {
          this.showErrors();
        // } else if (!!this.valuePicked.size && !this.valuePicked.shape) {
        //   this.step = 5;
        } else if (this.valuePicked.shape && (this.valuePicked.shape === 1 || this.valuePicked.shape === 5)) {
          this.showErrors(true);
        } else {
          this.step++;
        }
      },

      prevStep() {
        this.step = this.step > 0 ? this.step - 1 : this.step;
      },

      reset() {
        this.step = 0;
        this.hasError = false;
        this.errorCode = null;
        this.valuePicked = JSON.parse(JSON.stringify(_valuePicked));
        this.activeItems = JSON.parse(JSON.stringify(_activeItems));
      },

      setSizeOptions(){
        const variantSelectorOptions = document.querySelectorAll('#product-variants > option');

        Array.from(variantSelectorOptions).forEach((option, index) =>
          this.sizeOptions.push({
            name: option.text,
            index,
           })
        );
      },

      setMinimunSize() {
        this.mySize = this.sizeOptions[0].index;
      },

      setSize(size) {
        console.log(this.sizeOptionsArray, size, this.sizeOptionsArray.findIndex((i) => i === size));
        const variantSelector = document.querySelector('#product-variants');

        variantSelector.selectedIndex = this.sizeOptionsArray.findIndex((i) => i === size);
        this.toggleModal();
      },

      shopNow(size) {
        this.setSize(size);

        console.log(this.sizeOptions);
        const addTocart = document.querySelector('#add-to-cart');
        addTocart.click();
      },

      showResults() {
        // 8 is the results page
        this.step = 8;
      },

      showErrors(offer) {
        // 1 is the not enought data page
        // 10 is the not offering data page
        this.hasError = true;
        this.errorCode = (offer ? 2 : 1);
      },

      findNextSize(size) {
        const optionsArray = this.sizeOptions.map(i => i.name);
        const foundIndex = optionsArray.findIndex((i) => i === size);

        return optionsArray[foundIndex + 1];
      },

      findPrevSize(size) {
        const optionsArray = this.sizeOptions.map(i => i.name);
        const foundIndex = optionsArray.findIndex((i) => i === size);

        return optionsArray[foundIndex - 1];
      },

      handleSizeClick(size, name, takeHalf) {
        if (!this.valuePicked.size) {
          this.valuePicked.size = name;
          this.takeHalf = !!takeHalf;
        }

        this.activeItems[size] = this.activeItems[size] === name ? '' : name;
        console.log(this.currentIsSleceted);
      },

      handleShapeClick(value) {
        this.valuePicked.shape = value;
      },

      generateImgUrl(imgName) {
        return this.imageUrl.replace('shape1', imgName);
      },
    },

    template: `
      <span>
        <span :class="labelClass" @click="toggleModal">{{ label }}</span>
        <div :class="modalClasses">
          <div class="modal__container">
            <div class="modal__header">
              <h2 v-if="step > 0 && !finished && !hasError" class="modal__title">What’s my size?</h2>
              <h2 v-if="finished && !hasError && !isMobile" class="modal__title">All done, thank you! We told you it was quick. </h2>

              <span class="modal__close">
                <span @click="toggleModal" class="icon icon--close"></span>
              </span>
            </div>

            <div class="modal__content">
              <div class="my-size__step-wrapper">
                <template v-if="step === 0">
                  <h2 class="my-size__step-heading my-size__step-heading-initial">Find out your Beckett Simonon size <br />in 30 seconds or less.</h2>
                  <p @click="prevStep" class="my-size__step-paragraph">We ask you a few simple questions, crunch the numbers and calculate the best size for you. It’s simple and extremely accurate! {{ step }}</p>
                  <span @click="nextStep" class="btn btn--scarlet my-size__step-btn">Start</span>
                </template>

                <template v-if="step === 1">
                  <h2 class="my-size__step-heading my-size__step-heading--small">Do you know your Brannock device size?</h2>

                  <div class="my-size__sizes-wrapper">
                    <span v-for="(size, index) in sizeOptions"
                      :key="index"
                      @click="handleSizeClick('size1', size.name)"
                      :class="['my-size__size', {'is-active': activeItems.size1 === size.name }]">{{ size.name }}</span>
                  </div>
                </template>

                <template v-if="step === 2">
                  <h2 class="my-size__step-heading my-size__step-heading--small">What size do you wear the most in dress shoe brands?</h2>
                  <p class="my-size__step-subtitle">i.e. Allen Edmonds, Johnston & Murphy or Cole Haan</p>

                  <div class="my-size__sizes-wrapper">
                    <span v-for="(size, index) in sizeOptions"
                      :key="index"
                      @click="handleSizeClick('size2', size.name)"
                      :class="['my-size__size', {'is-active': activeItems.size2 === size.name }]">{{ size.name }}</span>
                  </div>
                </template>

                <template v-if="step === 3">
                  <h2 class="my-size__step-heading my-size__step-heading--small">What size do you wear the most in sneaker brands?</h2>
                  <p class="my-size__step-subtitle">i.e. Adidas and Nike</p>

                  <div class="my-size__sizes-wrapper">
                    <span v-for="(size, index) in sizeOptions"
                      :key="index"
                      @click="handleSizeClick('size3', size.name, true)"
                      :class="['my-size__size', {'is-active': activeItems.size3 === size.name }]">{{ size.name }}</span>
                  </div>
                </template>

                <template v-if="step === 4 && !hasError">
                  <h2 class="my-size__step-heading my-size__step-heading--small">What is the most common shoe size in your closet today?</h2>

                  <div class="my-size__sizes-wrapper">
                    <span v-for="(size, index) in sizeOptions"
                      :key="index"
                      @click="handleSizeClick('size4', size.name)"
                      :class="['my-size__size', {'is-active': activeItems.size4 === size.name }]">{{ size.name }}</span>
                  </div>
                </template>

                <template v-if="step === 5 && !hasError">
                  <h2 class="my-size__step-heading my-size__step-heading--small">How would you describe your foot shape?</h2>

                  <div class="my-size__shape-wrapper">
                    <div v-for="(shape, index) in shapeTypes"
                      :key="index"
                      @click="handleShapeClick(shape.value)"
                      :class="['my-size__shape', {'is-active': valuePicked.shape === shape.value }]">

                      <img :src="generateImgUrl(shape.icon)" class="svg my-size__shape-icon" />
                      <span class="my-size__shape-name">{{ shape.text }}</span>
                      <small v-if="shape.popular" class="my-size__shape-small">Most popular</small>
                    </div>
                  </div>
                </template>

                <template v-if="finished">
                  <h2 v-if="isMobile" class="my-size__step-heading">All done, thank you! We told you it was quick. </h2>
                  <h2 class="my-size__step-heading my-size__step-heading--small">Your Beckett Simonon size is:</h2>
                  <span class="my-size__step-final-size">{{ valuePicked.size }}</span>
                  <p class="my-size__step-description">Still have doubts? No problem! Remember shipping, returns and size <br /> exchanges are completely free in the contiguous US.</p>
                  <span @click="shopNow(valuePicked.size)" class="btn btn--scarlet my-size__step-btn">Shop now</span>
                </template>

                <template v-if="errorCode === 1 && hasError">
                  <img :src="generateImgUrl('step-error')" class="my-size__error-icon" />
                  <h2 class="my-size__step-heading my-size__step-heading--small">Bummer! we don’t have enough data to calculate your size.</h2>
                  <p class="my-size__error-description">Please contact us at <a href="mailto:service@beckettsimonon.com">service@beckettsimonon.com</a> and we’ll give you a <br /> personalized recommendation.</p>
                </template>

                <template v-if="errorCode === 2 && hasError">
                  <img :src="generateImgUrl('step-error')" class="my-size__error-icon" />
                  <h2 class="my-size__step-heading my-size__step-heading--small">Ooops! It looks like we don’t offer your size yet.</h2>
                  <p class="my-size__error-description">We’re very sorry about that. If you’d like to be notified when we do, <br /> please contact us at <a href="mailto:service@beckettsimonon.com">service@beckettsimonon.com</a></p>
                </template>
              </div>

              <span v-if="step > 1 && step > 0 && !finished && !hasError" @click="prevStep" class="my-size__arrow my-size__arrow--left icon icon--arrow"></span>
              <span v-if="step <= stepCount && step > 0 && !hasError" @click="nextStep" class="my-size__arrow my-size__arrow--right icon icon--arrow"></span>

              <span v-if="step > 0 && !finished && !handleFooter"
                @click="nextStep"
                class="my-size__footer">I Don't Know</span>
              <div class="my-size__progress">
                <div v-if="step >= 1 && !hasError" class="my-size__progress-count">
                  <span>1</span>
                  <span>2</span>
                  <span>3</span>
                  <span>4</span>
                  <span>5</span>
                  <span>6</span>
                </div>
                <div class="my-size__progress-bar" :style="stepWidth"></div>
              </div>
            </div>
          </div>
        </div>
      </span>
    `,
  });

  new Vue({
    el: '#product',
  });
}

var siteHeaderHeight = $('[data-section-id="header"]').height() + 20;
var productDetailsHeight = $('.product-header__details').height();
var imagesOffset = $('.product-header__images').height();
var imagesOffsetFinal = (imagesOffset - window.innerHeight) + siteHeaderHeight;
var bottomSize = window.innerHeight - (siteHeaderHeight + productDetailsHeight);
var productToolbarOffset = $('.product-toolbar').height();
var pageScrollClass = 'images-viewed';
var productToolbarBodyClass = 'product-toolbar--visible';
var productPageClass = 'page--product';
var isMobile = window.innerWidth < 1024;

function manageDetailsPosition() {
  var scrollTop = $(window).scrollTop();
  function toolbarCalculation() {
    return isMobile ?
            scrollTop >= ((imagesOffset + productDetailsHeight) - productToolbarOffset) :
            scrollTop >= (imagesOffset - productToolbarOffset);
  }

  if (scrollTop >= (imagesOffsetFinal + bottomSize)) {
    $('body').addClass(pageScrollClass);
  } else if (scrollTop < (imagesOffsetFinal + bottomSize)) {
    $('body').removeClass(pageScrollClass);
  }

  if (toolbarCalculation()) {
    $('body').addClass(productToolbarBodyClass);
  } else {
    $('body').removeClass(productToolbarBodyClass);
  }
}

function initializeEffect() {
  if (imagesOffsetFinal > 0) {
    if ($(window).scrollTop() >= (imagesOffsetFinal + bottomSize)) {
      $('body').addClass(pageScrollClass);
    }
  } else {
    setTimeout(function() {
      initializeEffect();
    }, 1000);
  }
}

if ($('body').hasClass(productPageClass)) {
  initializeEffect();


  $(window).scroll(function() {
    manageDetailsPosition();
  });
}

var $productFilter = $('.js-product-filter');
var $allProducts = $('.js-all-products');
var $allProductsOverlay = $('.js-all-products-overlay');
var allProductActiveClass = "all-products__filters--active";
var productFilterActiveClass = "all-products__filter--active";

$allProductsOverlay.on('click', function() {
  var $activeFilter = $('.'+productFilterActiveClass);
  $activeFilter.removeClass(productFilterActiveClass);
  $allProducts.removeClass(allProductActiveClass);
});

$productFilter.on('click', function() {
  var $this = $(this);
  var $activeFilter = $('.'+productFilterActiveClass);

  if ($activeFilter.length > 0) {
    $activeFilter.not(this).removeClass(productFilterActiveClass);
  }

  if ($this.hasClass(productFilterActiveClass)) {
    $this.removeClass(productFilterActiveClass);
    $allProducts.removeClass(allProductActiveClass);
  } else {
    $this.addClass(productFilterActiveClass);
    $allProducts.addClass(allProductActiveClass);
  }
});

$(window).on('load', function() {
  var mediaSlider = $('.js-slick-product-media');
  var mediaSliderArrowPrev = $('.js-slick-product-media__prev');
  var mediaSliderArrowNext = $('.js-slick-product-media__next');
  var $status = $('.js-slick-product-media-counter');

  mediaSlider.on('init reInit afterChange', function(event, slick, currentSlide, nextSlide){
    var counter = (currentSlide ? currentSlide : 0) + 1;
    $status.text('0' + counter + ' / 0' + slick.slideCount);
  });

  mediaSlider.slick({
    infinite: true,
    slidesToShow: 1,
    slidesToScroll: 1,
    arrows: false
  });

  mediaSliderArrowPrev.on('click', function() {
    mediaSlider.slick('slickPrev');
  });

  mediaSliderArrowNext.on('click', function() {
    mediaSlider.slick('slickNext');
  });

  $('.js-product-faq-items').accordion({
    active: false,
    collapsible: true,
  });

  var productImagesSlider = $('.js-slick-product-images');

  function initializeImagesSlider() {
    if (window.innerWidth < 1024) {
      var productImagesSliderArrowPrev = $('.js-slick-product-images__prev');
      var productImagesSliderArrowNext = $('.js-slick-product-images__next');
      var $status = $('.js-slick-product-images-counter');

      productImagesSlider.on('init reInit afterChange', function(event, slick, currentSlide, nextSlide){
        var counter = (currentSlide ? currentSlide : 0) + 1;
        $status.text('0' + counter + ' / 0' + slick.slideCount);
      });

      productImagesSlider.slick({
        draggable: false,
        prevArrow: productImagesSliderArrowPrev,
        nextArrow: productImagesSliderArrowNext,
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        arrows: false
      });

      productImagesSliderArrowPrev.on('click', function() {
        productImagesSlider.slick('slickPrev');
      });

      productImagesSliderArrowNext.on('click', function() {
        productImagesSlider.slick('slickNext');
      });
    }
  }

  initializeImagesSlider();

  $(window).on('resize', function() {
    if (!productImagesSlider.hasClass('slick-initialized')) {
      initializeImagesSlider();
    }
  });
});

if (typeof Vue === 'function') {
  Vue.component('product-information', {
    name: 'productInformation',

    data: function () {
      return {
        information: window.productMoreInfo,
        productId: window.currentProduct.id,
        productCollection: window.currentProduct.collection,
      };
    },

    computed: {
      infoItem() {
        return this.information[this.productId][this.productCollection] || [];
      },
    },

    template: `
      <span v-if="Object.keys(infoItem).length > 0">
        <article v-for="(item, index) in Object.keys(infoItem)"
          :key="index"
          v-if="infoItem[item].image"
          class="product-information__item">
          <div class="product-information__item-image-wrapper">
            <img class="product-information__item-image"
              :src="infoItem[item].image" />
          </div>

          <div class="product-information__item-content">
            <header class="layout-section__header">
              <small class="layout-section__eyebrow">{{ infoItem[item].eyebrow }}</small>
              <h2 class="layout-section__title">{{ infoItem[item].title }}</h2>
              <p class="layout-section__description section--why-us__description">{{ infoItem[item].description }}</p>
            </header>
          </div>
        </article>
      </span>
    `,
  });

  Vue.component('product-more-details', {
    name: 'productMoreDetails',

    data: function () {
      return {
        information: window.productMoreDetails,
        productCollection: window.currentProduct.collection,
      };
    },

    computed: {
      infoItem() {
        return this.information[this.productCollection];
      },
    },

    mounted() {
      const el = document.querySelector('.product-more-details');

      if (!this.infoItem) {
        el.style.display = 'none';
      }
    },

    methods: {
      unscapify(string) {
        return decodeURI(string);
      },
    },

    template: `
      <span v-if="infoItem && Object.keys(infoItem).length > 0">
        <article v-for="(item, index) in infoItem"
          :key="index"
          class="product-more-details__item">
          <small class="layout-section__eyebrow">{{ unscapify(item.eyebrow) }}</small>
          <p class="layout-section__description">{{ unscapify(item.description) }}</p>
          <span class="separator"></span>
        </article>
      </span>
    `,
  });

  Vue.component('product-media-video', {
    name: 'productMediaVideo',

    data: function () {
      return {
        information: window.productMedia,
        productCollection: window.currentProduct.collection,
      };
    },

    computed: {
      infoItem() {
        return this.information[this.productCollection] ? this.information[this.productCollection].video : [];
      },

      getUrls() {
        const base = 'https://fast.wistia.com/embed/medias/';
        return {
          js: `${base}${this.infoItem}.jsonp`,
          img: `${base}${this.infoItem}/swatch`,
          class: ['wistia_embed', `wistia_async_${this.infoItem}`, 'videoFoam=true'],
        };
      },
    },

    mounted() {
      const el = document.querySelector('.product-media__video-wrapper');

      if (this.infoItem.length === 0) {
        el.style.display = 'none';
      }
    },

    template: `
      <div v-if="infoItem && infoItem.length > 0" class="media-video__iframe-wrapper">
        <script :src="getUrls.js" async></script>
        <div class="wistia_responsive_padding" style="padding:56.25% 0 0 0;position:relative;">
          <div class="wistia_responsive_wrapper" style="height:100%;left:0;position:absolute;top:0;width:100%;">
            <div :class="getUrls.class" style="height:100%;position:relative;width:100%">
              <div class="wistia_swatch" style="height:100%;left:0;opacity:0;overflow:hidden;position:absolute;top:0;transition:opacity 200ms;width:100%;">
                <img :src="getUrls.img"
                  style="filter:blur(5px);height:100%;object-fit:contain;width:100%;"
                  alt=""
                  onload="this.parentNode.style.opacity=1;" />
              </div>
            </div>
          </div>
        </div>
      </div>
    `,
  });

  Vue.component('product-media-images', {
    name: 'productMediaImages',

    data: function () {
      return {
        information: window.productMedia,
        productCollection: window.currentProduct.collection,
      };
    },

    computed: {
      infoItem() {
        return this.information[this.productCollection] ? this.information[this.productCollection].images : [];
      },
    },

    template: `
      <div v-if="infoItem && infoItem.length > 0" class="product-media__carousel js-slick-product-media">
        <div v-for="(item, index) in infoItem"
          :key="index"
          class="product-media__carousel-item">
          <img class="product-media__carousel-image"
            :src="item" />
        </div>
      </div>
    `,
  });

  Vue.component('product-faq', {
    name: 'productFaq',

    data: function () {
      return {
        information: window.productFaq,
        productCollection: window.currentProduct.collection,
      };
    },

    computed: {
      infoItem() {
        return this.information[this.productCollection];
      },
    },

    mounted() {
      const el = document.querySelector('.product-faq');

      if (!this.infoItem) {
        el.style.display = 'none';
      }
    },

    template: `
      <div v-if="infoItem && infoItem.length > 0" class="accordion product-faq__items js-product-faq-items">
        <template v-for="(item, index) in infoItem">
          <h2 class="accordion__header product-faq__item-header">{{ item.question }}</h2>
          <div class="accordion__content product-faq__item-contnet">
            <p class="accordion__text product-faq__item-description">{{ item.answer }}</p>
          </div>
        </template>
      </div>
    `,
  });

  new Vue({
    el: '#product-info',
  });
}

var position = $(window).scrollTop();
var siteWidth = window.innerWidth;
var navElem = $('.js-header-main');
var navClass = 'main-nav--sticky';

if ($('body').hasClass('has-sticky-nav')) {
  $(window).scroll(function() {
    if (window.innerWidth > 1023) {
      var scroll = $(window).scrollTop();
      if(window.scrollY < 80) {
        navElem.removeClass(navClass);
        $('body').removeClass('main-sticky-visible');

      } else if (scroll < (position - 5)) {
        $('body').addClass('main-sticky-visible');
        navElem.addClass(navClass);

      } else if ((scroll > position) && navElem.hasClass(navClass)) {
        navElem.addClass('leaving');

        setTimeout(function() {
          navElem.removeClass('leaving');
          navElem.removeClass(navClass);
          $('body').removeClass('main-sticky-visible');
        }, 200);
      }

      position = scroll;
    }
  });
}
